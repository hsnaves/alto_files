Heading:qjk40(635)Tape Server Protocol (TSP)y756qjk40Page Numbers: Yes  X: 527  Y: 10.5"qjk40Inter-Office Memorandumz18592l4445y762\f5bTo	Distributed Computing	Date	October 9, 1979z18592l4445d2998e21(0,65535)(1,4445)(5,11684)(6,14146)\f1 2f0t2 1t0 21t6 1f1t0 4f0t7 1t0From	Glenn Krasner	Location	Palo Altoz18592l4445d2998y716e25\f1 4f0t2 1t0 13t6 1f1t0 8f0t7 1t0Subject	Tape Server Protocol(Version 0.1)	Organization	PARC/SSLz18592l4445d2998e25\f1 7f0t2 1t0 34t6 1f1t0 12f0t7 1t0XEROX       z18592l508y644e14(2116)\f2 5f0Filed on: [IVY]<TapeServer>Docs>TapeServerProtocol.memo, .presse30e10The Tape Server Protocol is a means for accessing magnetic tapes via a tape server over an Ethernet.  It currently provides only a low-level interface to the tape server; in general allowing record-level manipulation rather than file-level manipulation.  It does support all the magtape operations understood to be required by Tenex.  The protocol uses the Byte Stream Protocol (BSP) and is somewhat based on the File Transfer Protocol (see AltoSubsystems manual) and the CopyDisk Protocol (see <Pup>CopyDisk.press).e12jk40Overviewe12jk40\bThere are two parties involved in mag tape operations: a server which controlls the actual tape drive(s) and which responds to commands, and a user which makes command requests from the server.e12jk40\57i6I80i4IInitially, the server is listening for connection requests at a well-known socket (following Rendezvous/Termination Protocol) until the user initiates a connection.  Once the connection is established, the user sends commands and receives answers from the server until the connection is terminated.e12jk40\15i6I115i4I66i4I46i6IIt is the operator's responsibility to mount the correct tapes on the correct drives; there is no provision in the Protocol to check this.e12jk40\10i8ISimilar to the File Transfer and CopyDisk Protocols, the server should be passively responding to commands but never initiating action, and the user is responsible for checking to be sure all operations are reasonable.e12jk40\57i6I81i4IThe Protocole12jk40\bHaving once established a BSP connection with the server, the user sends a [Version] command to insure that they are using the same protocol version.  Typically the user then issues an [OpenDrive] command and proceeds to issue comands for that drive.  When through, the typical user issues a [CloseDrive] command to free the drive, and terminates the connection.e12jk40\62i4I99i4I109i4IThe tape manipulation commands are outlined below, and include reading and writing records, forward and backward skipping of records and files, rewinding and unloading of drives and error/status handling.  As mentioned earlier the commands currently do not include higher-level functions such as write/read file or position at file x.e12jk40Commands are generally answered by the server with a [Yes] message, meaning that the operation was performed successfully, also in some cases indicating an ending status, or with a [No] message, meaning that the operation was not performed succcessfully, indicating what may have been the cause.e12jk40The protocol allows one user to have only one drive open at a time (i.e. one drive per connection).  In order for one machine to user more than one drive, it must establish multiple connections with the server; in effect becoming more than one user.e12jk40\24i4I40i3I132i6I35i4IMessagese12jk40\b8BCommands and responses (generically called messages) in the Tape Server Protocol are sent in blocks similar to those of the CopyDisk Protocol.  These blocks consist of a length word (which is in words and includes that word), followed generally by a numeric code word distinguishing the message, usually followed by a block of data (record transfers) or string of text (intended to be printed at the operator's console).  Blocks are an integral number of words long.e12jk40\43i8IBelow is the list of messages.  It is organized in terms of the command sent by the user followed by corresponding responses sent by the server.  Following this list is an example of typical tape service, and following that is a complete list of messages along with their currently assigned numbers.e12jk40\84i4I49i6ICommand/Response Liste12jk40\b21BiIdentification/Termination:Command: [Version] <code> <string>This command should be the first sent by the user after establishing a BSP connection.  The code should be a numeric code representing the current version number of the user's TSP.  String is an arbitrary string such as "Tape Server Protocol, V0.0".Response: [Version] <code> <string>The server should respond with this message.  It is the user's responsibility to match codes for compatibility.  String could be displayed at the operator's consold to indicate good connection.Drive Control:e12jk40\i26I3i7I73i4I120i4I77i8I32i6I46i4I134i13ICommand: [OpenDrive] <drive#> <userID>This command requests the use of drive drive#, providing userID as some sort of password protection.  Currently userID is ignored by the server.Response: [Yes] <code-good open> Should the drive be free and ok for the user to have, the server responds with this message.  Code-good open is used to distinguish this [Yes] message from the many others.  Each user (each connection) may have only one drive open at a time.Response: [No] <code-bad open, type #> <string>Should the server be unable to open this drive for this user, this is the appropriate response.  The code indicates the reason that the open was unsuccessful, and the string may be sent to the operator.Command: [CloseDrive] This command relinquishes control over the drive.  It does not request an unload of the tape.Response: [Yes] <ok op>Response: [No] <bad close> e12jk40\i7I24i4I61i4I51i4I21i6I2i8I66i4I14i6I178i8I51i6I39i4I144i7I110i8I16i8IReading/Writing:e12jk40\i15IRecords to be read/written may be of arbitrary length, as far as the protocol is concerned.  However, in the Alto implementation they may be no longer than 32K bytes (16K words).Command: [ReadRecord] Requests that the next record on the tape be read.Response: [HereIsRecord] <status> <length> <data>This is the record requested by the last [ReadRecord].  Status indicates ending status of the read, such as EOT or EOF or error.  Data are the data bytes read.  Length is the number of bytes actually read.Command: [WriteRecord] <length> <data>Requests that data be written as the next record of the tape.Response: [Yes] <code-ending status>All went well with write.Response: [No] <code-bad ending status> <string>Something went wrong with write, code and string describe problems.e12jk40\f1 179f0i8I67i8I249i7I94i8I55i8ISkipping:Command: [FwdSpaceRecord] Requests the next record forward to be skipped over.Response: [Yes] <code-ending status>Response: [No] <code-bad ending status> <string>Command: [BackSpaceRecord] Requests a backward skip of one record.Response: same as [FwdSpaceRecord].Command: [ForwardSpaceFile] Requests skipping one file forward.Response: same as [FwdSpaceRecord].  No indication of number of records skipped is given.Command: [BackSpaceFile] Requests skipping back one file.Response: same as [FwdSpaceRecord].e12jk40\i8I3i7I73i8I29i8I42i7I61i8I29i7I58i8I83i7I52i8IWriting Spaces:e12jk40\i14ICommand: [WriteEndOfFile] Requests an EOF be put on the tape, indicating the end of the current file.Response: [Yes] <code-ending status>Response: [No] <code-bad ending status> <string>Command: [WriteBlankTape]  <inches>Requests that inches of tape be written blank.Response: [Yes] <code-ending status>Response: [No] <code-bad ending status> <string>e12jk40\i7I96i8I29i8I42i7I76i8I29i8IRewinding:The [Yes] response to these commands indicates that the operation has been initiated, not completed.  This allows the user to initiate a rewind or unload, but not have to wait for its completion.e12jk40\i9I1f1 197f0Command: [Rewind] Requests a rewind of the tape.Response: [Yes] <BOT>Response: [No] <bad Rewind> Command: [Unload] Requests that the tape be rewound and unloaded.  Response: [Yes] <BOT>Response: [No] <bad Unload command>e12jk40\i7I42i9I14i8I22i7I61i9I14i8IStatus:Statuses that may be read or written have not yet been fully established.  So far they include write protection, device error (hung device), data rerror, BOT, EOT which may be read; and write protection and suppress error correction, which may be set.  These include the statuses required by Tenex.Command: [GetStatus] Requests the current status of the drive.Response: [HereIsStatus] <status block>Returns status of drive. Command: [SetStatus] <status> <new setting>Requests that this drive status be given this new setting.Response: [Yes] <code-ending status>Response: [No] <code-bad ending status>Command: [SendToOperator] <length in bytes> <string>Requests that the string be printed on the operator's consoleResponse: [Yes] <ok>Response: [No] <bad send>Command: [GetFromOperator]Requests that a string typed by the operator be sent to the user.Response: [HereIsText] <length in bytes> <string>Response: [No] <bad get>e12jk40\i6I303i7I57i8I59i7I96i8I29i8I33i7I108i8I13i8I19i7I86i8I42i8IExamplee12jk40\b7BA operator desires to read file 3 from a tape on drive 2.  The operator must mount the tape on the drive, put it on line and start the user program.  The user establishes connection with the server and the following conversation occurs:U: [Version] <1> Alto TSP user 1.00 S: [Version] <1> TSP server 1.00  User verifies that versions match, and proceeds.U: [OpenDrive] <2> <me> S: [Yes] <good open> U: [Rewind]  Rewind drive to get to file 3.U: [FwdSpaceFile] S: [Yes] <ok op> U: [FwdSpaceFile] S: [Yes] <ok op> U: [FwdSpaceFile] S: [Yes] <ok op>  At file 3, now read records.U: [ReadRecord] S: [HereIsRecord] <ok op> <length in bytes of record> <data of record> 	.	.	.U: [ReadRecord] S: [HereIsRecord] <ok op> <length in bytes of record> <data of record> U: [ReadRecord] S: [HereIsRecord] <EOF> <length in bytes of record> <data of record>  End of File, last record read.U: [CloseDrive]S: [Yes] <ok op> Connection is terminated; all went well.e12jk40\309i50I62i32I114i30I276i32IMessage Liste12jk40\bMessage			Mark Byte Value(octal)[Yes]			  1[No]			  2[Version]			  3[SendToOperator]		  4[GetFromOperator]		  5[OpenDrive]			  6[CloseDrive]			  7[ReadRecord]		 10[WriteRecord]		 11[FwdSpaceRecord]		 12[BackSpaceRecord]		 13[FwdSpaceFile]		 14[BackSpaceFile]		 15[WriteEndOfFile]		 16[WriteBlankTape]		 17[Rewind]			 20[Unload]			 21[GetStatus]			 22[SetStatus]			 23[HereIsText]			 24[HereIsRecord]		 25[HereIsStatus]		 26e12jk40\i33IEnding Codes (Yes, No response codes)0	Ok op, operation went well, no problems1	BOT, last op resulted in Beginning of Tape condition2	EOT, last op resulted in End of Tape condition3	EOF, last op resulted in End Of File condition4	Drive offline error5	Hardware error6	Software error7	Illegal handle10	Write attempted on write-protected tapee12jk40\b12Be12jk40The file TSP.decl includes the BCPL declarations for the TSP messages.e12jk40e12j