ILFilePool declare: Noop as: 2; declare: RequestBits as: 0176000; declare: BrokenConnection as: 12; declare: BadLeafHandle as: 1011.phylum name: 'Smalltalk-User' password: 'Smalltalk'.'From Smalltalk 5.5k XM November 15 on 15 November 1980 at 9:58:05 am.'(500)AltoFileDirectory asFollows\f5bDictionary(635)\f5bnextEntry: file | s elen [	dirFilenil [		(file name compare: dirname) = 2 [			"return system directory file. known serialNumber and leader"			file serialNumber: 0100000, 0144; leader: 010000.			file]		self error: 'directory not open']	"return the next file entry, ignore deleted entries,	and leave dirFile positioned before next entry"	while (s _ dirFile nextword) do [		elen _ s land: dfmask-1.		s allmask: dfmask [			file readFrom: dirFile.			dirFile skip: elen*2 - (file fileSize + 2).			file]		"deleted entry, again"		dirFile skipwords: elen-1].	false]\b16B69i59I104i99I176i20Iopen | f s a page len elen type [	nil  dirFile []	"assume some defaults in case DSHAPE is not in SysDir leader page.	these should only be needed if the disk is old (and not scavenged).	they will not work if a 14 sector system is missing DSHAPE (unlikely) since addresses of first page of directory and of DiskDescriptor might be computed incorrectly.	in a Smalltalk-76 system, nSectors, diskPages had better eventually match:		| a. a _ Vmem specialLocs13. mem(a+5), (mem(a+6))	"	nSectors _ 12.	diskPages _ 812*nSectors.	totalPages _ 2*diskPages.	"read SysDir leader page to find out file system configuration.  see AltoFileSys.D"	f _ self find: dirname.	"to prevent address of page 1 from being stored"	f pageAddresses: false.	"length of property list, in words"	page _ f read: 0.	len _ page494.	[len  210 []	"scan file properties for DSHAPE"	s _ page asStream.	s skipwords: page493.	while len > 0 do [		type _ s next.		type = 0 [			"0 terminates list.  property not found. try to read if from DiskDescriptor"			len _ 0]		elen _ s next.		type = 1 and elen = 5 [			"DSHAPE. read property"			self configure: s.			"set flags so configure and loop are not done again"			s _ false. len _ 0]		"skip over other property"		len _ len - elen.		s skipwords: elen-1]].	"now, with the correct (or default) file system configuration,	store the virtual address of next page (1), and create a FileStream on SysDir"	a _ AltoFileAddressTable new.	a1 _ page header: nextp.	f pageAddresses: a.	(dirFile _ f asStream) readonly.	(bitsFile _ self oldFile: 'DiskDescriptor') readwrite.	[s [		"configuration not read from SysDir. this will work for 12 sector systems.		14 sector systems should have had the DSHAPE property"		self configure: bitsFile]].	super open.]\b5B51i434I75i81I30i46I30i33I57i31I103i79I59i21I28i50I29i24I50i140I182i129IFileDirectory\f5brealToVirtual: adr ["see virtualToReal:.	Alto address format is	bits	0-3	sector number (0 - 015, i.e. 12 or 14 sectors)	4-12	cylinder number (0 - 0312, Model 31; 0-0625, Model 44)	13		head number (0-1)	14		disk number	(0-1)	15		restore bit.	in a system with two separable disks, addresses on disk 1 have a 0 disk bit, which is complemented by the disk primitive"	("sector: field" adr lshift: 12) +	("cylinder and head: field*" nSectors * ((adr land: 07774) lshift: 2)) +	("disk: field*pages per disk" [(adr land: 2) = 2 [diskPages] 0]		"diskPages*(adr land: 2)/2")	"vadr < 0 or vadr  totalPages [		self error: 'illegal disk address']"]\b19B6b14B3i328I7i13I24i25I50i26IvirtualToReal: vadr | t2 d ["inverse of realToVirtual:"	"vadr < 0 or vadr  totalPages [		self error: 'illegal virtual address']"	"faster to do /\ for normal Integers"	"t _ vadr intdiv: diskPages.	sec _ t2 intdiv: nSectors"	[vadr < diskPages [		d _ 0.		t2 _ vadr]	d _ 2.	t2 _ vadr \ diskPages].	("sector" (t2 \ nSectors) lshift: 12) +	("cylinder & head" (t2 / nSectors) lshift: 2) +	("disk" d "(vadr / diskPages) lshift: 1")]\b20B9i11bI14B262i6I35i15I34i4IAlto(500)\f5ballocate: nextPage after: address | index stop ch m vadr [	index _ false.	while true do [		"go around bittable from address to end, and beginning to address.		we start over again if the table appears full or bitsFile is out of sync"		[index and stop  totalPages [			"wrap around to where we started"			stop _ address.				index _ 0]		[index  false ["first time or bitsFile out of sync"]		"disk probabbly full"		user quitThen:'//   YOUR DISK IS FULL - Please make some space available.//   Then resume Smalltalk and interrupt or continue as desired...'].		self open.		"index by bits rather than bytes? close enough for now"		index _ address land: 0177770.		stop _ totalPages].		bitsFile position _ index/8 + boffset.		while (index and (index _ index+8)  stop) do [			(ch _ bitsFile next) = 0377 ["8 full"]			"check that bitsFile position is correct --				possibly out of sync with index if  growSmalltalkBy: occurred?"			bitsFile position  (index/8 + boffset) [index _ false]				m _ 0200.			for vadr from: index-8 to: index-1 do [				[(ch land: "nomask:" m) = 0 [					"page appears free. first update DiskDescriptor"					bitsFile skip: 1; next _ ch _ ch lor: m.					"then check if page is really free"					vadr=0 ["O.S. boot"]					([nextPage init; freePage;						address: (self virtualToReal: vadr);						doCommand: CCR error: false]) [vadr]					"page not really free"]				"page not free according to bit"].				m _ m lshift: 1].		].	]]\b34B63i140I40i37I51i34I6i19I166i53I186i6I7i109I163i46I54i35I16i9I129i20I8i30Ideallocate: page | index ch m [	[dirFilenil [self open]].	index _ self realToVirtual: page address.	"character position"	bitsFile position _ index/8 + boffset.	ch _ bitsFile next.	"bit position"	m _ 0200 lshift: 0-(index land: 7).	"make page free by turning off bit in DiskDescriptor"	(ch land: m) = m [bitsFile skip: 1; next_ ch - m]	user cr; show: 'page already free (dealloc:)']\b17B89i18I65i12I40i53IgrowSmalltalkBy: n | zfpt i file page a zlen ["dp0 growSmalltalkBy: 100."	"find and read last page of small.boot, then extend file"	i _ 1. zlen_ 96.	zfpt _ CoreLocs new base: (Vmem specialLocs7) length: zlen*2.	until zfpt(i+zlen) = 0 do [i _ i+1].	a _ (zfpt(i+zlen-1)) + (zfpti) - (zfpt(i-1)) - 1.	self open.	file _ self makeEntry: 'small.boot.'.	page _ file newPage.	page address: (self virtualToReal: a);		doCommand: CRR error: 'cannot read last page. growSmalltalkBy:'.	"bypass reading file and creating random access table, just extend it"	page lastPage [		file serialNumber: page serialNumber;			lastPage: page pageNumber;			pageAddresses: false "Read:, Write: check this";			Get: (page pageNumber: page pageNumber+n).			user space; print: self freePages; show: ' pages left.']	self error: 'growSmalltalkBy:. last page not last or 2 successive user grows']\b19B57i55I363i68I115b13Bi11IstampBoot | a file page ["dp0 stampBoot."	"update the time stamps in leader page of current boot file"	"find SafeId for current boot file"	a _ Vmem specialLocs13.	file _ self makeEntry: ''.	file serialNumber: mema, (mem(a+1)).	"read page one of the boot file to find out the leader address"	page _ file makeEntry: 1.	page address: mem(a+4).	"then set leader address and dirty flag, and close file		thereby updating create/write/read dates, but not name"	file doCommand: CCR page: page error: 'cannot read page 1 of boot file';		leader: (page header: backp);		type: write;		close](635)\b10B34i58I5i33I99i61I58i111I(500)AltoFile asFollows(635)\f5bFile\f5bRead: page | pn p palen [	pn _ page pageNumber.	[pageAddresses [palen _ pageAddresses length]	pn = 0 [palen _ 0]	false].	for p from: (palen min: pn) to: pn do [		"set up page for checking"		page			"zeroed by machine code			header: nextp _ [p < palen [pageAddresses(p+1)] 0];			header: backp _ [p=0 [0]; =1[leader] pageAddresses(p-1)];			length: [p < palen [page dataLength] 0];"			pageNumber: p;			address: [p=0 [leader] pageAddressesp];			doCommand: CCR error: 'readPage:'.		page lastPage [(lastpn _ p) < pn [false]]		p  palen and pageAddresses[pageAddresses(p+1) _ page header: nextp]		"no need to store if already known or no page table"].	page]\b11B164i24I13i22I393i50IAlto\f5bupdateLeader: page | s time lastwrite [ 	"see <Alto>AltoFileSys.D, (p.3 leader page) for further info"	time _ user timewords.	s _ page asStream.	[type anymask: write  [		"set creation/write/read date and file name"		directory flush.		lastwrite _ time.		s append: time; append: time; append: time.		name empty []		s nextString_ name]	"remember creation, skip write, update read date"	lastwrite _ s next: 4.	s skip: 4; append: time].	self Write: page.	lastwrite]\b19B24i59I75i42I128i47IILFile asFollows(500)\f5bFile\f5bclose: e | p ["close file, possibly ignoring errors"	"for next open"	type _ read.	"shorten header block to first 2 words: command&length,  file handle"	p _ self newPage.	p length: 6.	self doCommand: Close page: p error: e]\b9Brelease [self close: false]\b8Bclose ["ignore errors if file was readonly" self close: [type = read [false] 'close']]\b6BclassInit | i sym names ["ILFile classInit."	ILFilePool declare: NotFound as: '207'.	names _ (		1011 (BadLeafHandle)		02000 (AnswerBit)		0176000 (RequestBits)		0260 (LeafType)"5-bit operations for left field command block word"		0 (Error Open Close Delete)		6 (Read Write Reset)"read/write modes"		0140 (SetEof "no holes, set eof")		0200 (NoExtend "don't extend file on read or write")		0100 (NoHoles "for writing past end")"open file modes"		0163400 (WriteOld "read, write, extend, any explicit, highest")		0103400 (ReadOld "read, any explicit, highest")		0167600 (CreateNew "read, write, extend, create, any explicit, next")"control codes for left half of pupID1 field"		0 (Data Ack Noop)		5 (OpenConnection "if Reset")		9 (DestroyConnection Dally Quit BrokenConnection)) asStream.	for i from: names do [		for sym from: names next do [			ILFilePool declare: sym as: i.			i _ i+1]]]\b10BerrorString: errorCode | ef ename errorString notfound dollar cr [	[errorCode is: String [		errorString _ errorCode.		errorCode _ [(errorString1) isdigit [errorString asInteger] 0]]	errorString _ errorCode asString].	ename _ '<System>Ifs.Errors'.	(self name compare: ename) = 2 [		"recursion" errorString + ' (cannot access Ifs.Errors !!!)']	notfound _ errorString + '	(error code not found)'.	errorCode  0 [notfound]	dollar _ '$'1. cr _ 015.	ef _ directory oldFile: ename.	ef readonly.	errorString _ false.	"scan through the errors file looking for lines of the form:$$nn	some message"	until errorString do [		ef skipTo: dollar [			ef next = dollar [				"valid line"				ef integerScan					> errorCode ["since errors are ordered" errorString _ notfound];					= errorCode [						errorString _ (String new: 200) asStream.						errorString print: errorCode.						until (ef peek = dollar or ef peek = cr) do [							errorString append: (ef upto: cr); space].						errorString _ errorString contents]			]]		"end of file"		errorString _ notfound].	ef close.	errorString]\b23BdoCommand: com page: page error: e | in ecode [	page command: com.	while true do [		"make sure connection is open"		directory open.		error _ nullString.		[in _ directory socket sendPacket: page packet [			in11 = BrokenConnection [ecode _ 1]			"turn packet into a ILFilePage"			in _ [(self entryClass new) dictionary: self; page: in].			"check if answer is of same type as request"			((page header: 1) land: RequestBits) + AnswerBit =				((in header: 1) land: RequestBits) [in]			ecode _ in header: 2]		"no response?"		ecode _ false].		"some kind of problem"		com = Quit ["ignore" false]		[ecode  false or ecode = 1 ["make new connection" directory release]].		ecode = 1 or ecode = 1011 [			"try again after some reinitializing"			"reopen file"			self reopen.			"init page with new handle only -- don't lose mode, length, etc."			page serialNumber: serialNumber]		error _ [ecode [e [self errorString: ecode] ecode asString]			directory directory + ' not responding'].		e [self error: e "proceeding tries again"]		false]]\b35BILFileDirectory asFollows\f5bIFS\f5bopenFile: file mode: m | page [	"open bit modes	read	write	extend	multiple (0)	create name	explicit version in name (2b)		no, old, next or old, any	default (if no version specified) (2b)		no, lowest, highest, next	unused (7b)"	self open.	page _ file newPage.	"treat packet in page as a parameter block"	(ILParameterBlock new)		packet _ page packet;		nextword _ 0; "file handle"		nextword _ m; "modes"		nextString _ self userName;		nextString  _ self userPassword;		nextString _ ''; "connect name"		nextString _ ''; "connect password"		nextString _ self checkName: file name.	"answer bits (in page header: 5)	same (5b)	version (4b)		bad, default lowest, default highest, default next, !*, !L, !H, !N, explicit old, explicit lowest, explicit highest, explicit next, explicit new, explicit-less, explicit between, explicit greater"	page _ file doCommand: Open page: page error: false [		file serialNumber: page serialNumber.		"open returns file length"		file lastPage: (page pageNumber - [			((page header: 4) land: 0777) =0 ["full last page" 1] 0] max: 1)]	file error = NotFound [false]	file error: 'open ' + (file errorString: file error)]\b23BInteger asFollows\f5bArithmetic\f5b< arg | t	[t _ arg asInteger.	 t isLarge[t neg  false]	 self < t]\b6B3b2B arg | t	[t _ arg asInteger.	 t isLarge[t neg  false]	 self  t]\b6B3b2B> arg | t	[t _ arg asInteger.	 t isLarge[t neg]	 self > t]\b6B3b2B arg | t	[t _ arg asInteger.	 t isLarge[t neg]	 self  t]\b6B3b2BParagraph asFollows\f5bPress printing\f5bpresson: press in: r [self presson: press in: r style: self textStyle]\b21Bpresson: press in: r style: style | char pos s3 y chop [	"Output paragraph inside rectangle (page coordinates)"	"probably ParagraphScanner should handle this"	text length > 0 and text1 = 014 [		"formfeed --> page break"		self copy: 2 to: text length]	y _ r corner y.	"We change corner y later"	s3 _ ParagraphScanner new of: self to: press style: style.	s3 init in: r.	pos _ s3 position.	chop _ [alignment=1 [0] alignment].	while (y and (char _ s3 scan)) do [		char = 011  [s3 tab]		char = 040 or char = 015 	[			"carriage return or exceeded max width and backed up to blank"			y _ s3 printfrom: pos aligned: [char=040[alignment] chop] skip: 1				[r corner y _ y. s3 init in: r. pos _ s3 position]]		char  true [			"exceeded max width with no blanks in line"			s3 backup.			y _ s3 printfrom: pos aligned: 0 skip: 0				[r corner y _ y. s3 init in: r. pos _ s3 position]]		"user notify: 'unimplemented control char'"].	"Put out trailing text if any"	y and ((pos=s3 position) or (y _ s3 printfrom: pos aligned: chop skip: 0)) [		press append: text.		y]	press append: text(1 to: pos).	self copy: pos + 1 to: text length]\b34B24i54I167i26I234i62I148i43I118i43I4i30IListPane asFollows\f5bPane protocol\f5bhardcopy: pf | t cr first last lasty lineNum parag left right lineheight [	window hardcopy: pf thickness: 1.	[paranil [self makeParagraph]].	parag _ para asParagraph.	t _ para asStream.	last _ 0.	cr _ 015.	left _ frame minX.	right _ window maxX.	lasty _ frame minY.	lineheight _ self lineheight.	for lineNum from: firstShown to: lastShown do [		first _ last.		[(t skipTo: cr) or lineNum = lastShown [last _ t position]		user notify: 'not enough lines'].		[lineNum = selection and selection > 0 [			"outline selection; complementing doesn't look good"			(self selectionRect-(01) inset: 01) hardcopy: pf thickness: 1]].		(parag copy: first+1 to: last-1) presson: pf in:			(pf transrect: (left  lasty rect: right  (lasty+lineheight+4))) style: style.		lasty _ lasty + lineheight.	]](635)\b13B(500)Textframe asFollows\f5bPrinting\f5bhardcopy: pf | r first last lasty len parag left right top bottom [	[paranil [self makeParagraph]].	parag _ para asParagraph.	frame=window [parag presson: pf in: (pf transrect: window) style: style]	left _ frame minX max: window minX.	right _ window maxX min: frame maxX.	bottom _ window maxY min: frame maxY.	top _ window minY max: frame minY.	lasty _ top + 4. "slop for char finding and making print rect larger"	first _ self charofpt: left+1  lasty.	len _ parag length.	frame minX  left and frame maxX  right [		"paragraph is inset and may be scrolled"		(parag copy: first to: len) presson: pf in: (			pf transrect: (left  top rect: right  (bottom+4))) style: style]	"yuk, frame extends left or right so do it a line at a time for clipping"	while (first < len and lasty < bottom) do [		last _ (self charofpt: right-1  lasty) min: len.		r _ self rectofchar: last.		lasty _ lasty + r height.		(parag copy: first to: last) presson: pf in:			(pf transrect: (left  (r minY) rect: right  lasty)) style: style.		first _ last+1]]\b13B687i71ITextframe asFollows(635)\f5bImage\f5bstyle [style]\b6BInitialization\f5bstyle: style\bPanedWindow asFollows\f5bWindow protocol\f5bhardcopyTitle: pf [	"refresh title (since it's a class var)"	self showtitle.	"draw title rectangle"	titleframe window hardcopy: pf.	"print title text (make frame larger)"	titleframe para presson: pf in: (pf transrect: (		titleframe frame origin rect: titleframe frame corner + (999  2)))		style: titleframe style]\b18Bhardcopy: pf | pane [	self hardcopyTitle: pf.	"print frame rectangle"	frame hardcopy: pf.	"print all panes"	for pane from: panes do [pane hardcopy: pf].	"print cursor if it's inside"	frame has: user mp [user currentCursor hardcopy: pf]](500)\b13BFileStream asFollows\f5bStream\f5bend [	self reopen.	position < limit [false]	self read: page pageNumber+1 ["page empty" position = limit]	true]\b4Binto: s endError: err | charsRead len t [	len _ s  length.	[len > 80 [		charsRead _ len - (self readString: s from: 1 to: len)]	"in line: super into: s endError: err"	charsRead _ 0.	"read until count or stream is exhausted"	while (charsRead < len and (t _ self next)) do [s(charsRead _ charsRead+1) _t]].	err [		charsRead = len [s]		user notify: 'only read first ' + charsRead asString]	charsRead]\b22BStream asFollows\f5bSequential reading and writing\f5bnextString | len [	self into: (String new: [		(len _ self next)			<192[len]	"up to 191 chars (BCPL compat)"		len-192*256 + self next]) endError: true]		"up to 16383 chars"\b11B70i31I46inext: n [self into: (array species new: n) endError: true]\b8BUserView asFollows\f5bMisc System Stuff\f5bsystemworkspace1		"for system releasers only!!!this has been partitioned into three workspaces for editing convenience:	systemworkspace1		steps 0-4: general comments, handling Sources, creating a release.	systemworkspace2		steps 5-7: doing a vmem write or surgery, storing finished files on Phylum	systemworkspace3		step 8: after a release, e.g. updating press files0. This boot file should be named small.boot for vmem writing, surgery, and command file purposes.  If you made changes to the Sources disk be sure to update the current versions of (Xm)Smalltalk.Run, (Xm)Smalltalk.Syms, and (Xm)Byterp.mb on [Ivy]<Smalltalk>. This procedure works best on a Dorado for speed and disk space reasons, and it also can be done on an Alto (double disk O.S. required for vmem write).  Microcode changes (including making non-xm versions) must(?) be done on an Alto.  Step 5 (vmem writing) assumes enough space for another boot file.  To turn off display during execution, hold down left shift key while selecting 'doit'.For those who want to vmem write their own versions, do not execute steps 4, 7 or 8 without further editing of file and directory names. Underlined items are typical values and normally must be edited to be useful.1. to create an xm version:  filin changes and selected goodies. Undeclared must be empty for release to work (step 4). copy the categories of classes which have changed to systemworkspace3 (for later printing) and recompile it.	dp0 filin: ('changes.st').	phylum filin: ('<Small-goodies>xx.st').	Undeclared contents inVector, user changedCategories2. update version number/letter and comments in UserView version3. the Sources file will be ordinarily be created in step 4. if only a few changes are involved, it may be somewhat faster to copy the old sources file to the new sources file (this step). then step 4 will only append changes.	phylum store: Sources reset as: 'Smalltalk.Sources.' + user versionName.4. checks Undeclared, writes all or appends changed messages to Sources file, updates ChangedMessages, inits Changes, puts up greeting, and sets the default user name & password. note: this is only to be executed for releasing the Smalltalk system itself (supply the proper password!!). if you plan to do a vmem write next, better to do this as first line of step 5.	user releaseExternalViews.	phylum name: 'Smalltalk' password: 'password'.	user release.	phylum name: 'Smalltalk-User' password: 'Smalltalk'.	to write out the sources for a private version, specify which directory to use (don't leave Smalltalk as the default) and which categories and/or classes are to be included.	| c classes. user releaseExternalViews. classes _ (Vector new: 50) asStream.	phylum name: 'name' password: 'password'.	for c from: ('category1' class1) do [		c is: String [classes append: (SystemOrganization category: c)]		classes next _ c].	user file: (phylum file: '<ddd>xx.Sources.' + user versionName)		classes: classes contents changesOnly: false."\b18B1i355I3b2Bi784u16U63I1b2Bi228I14u10U37u5U60b2Bi65bI2Bi225I75i1bI3Bi364I65u8U74i174I93u4U13u8U19u18U123u7Usystemworkspace2		"for system releasers only!!!5. if no surgery or vmem write involved, skip to step 7. start here with an xm version to make a non-xm version.  specify option below:	1 vmem write (includes xm surgery)	2 xm surgery	3 non-xm surgeryto make things totally automatic, edit in your valid Maxc name and password, otherwise Ftp will ask you later (some of the file transfers can be edited out (i.e. if files are already present; also Ramload is superfluous on Dorado). in the case of surgery only, at the end you will have to hit a key after safing.	| option prefix dir file.option _ 1.dir _ phylum asFtpDirectory.dir directoryName: 'Smalltalk-76'.prefix _ [option=3 [''] 'Xm'].for file from: ('Smalltalk.Run' 'Smalltalk.Syms' 'Byterp.Mb') do [	dir retrieve: prefix + file as: file].dir closeThen: ([option=1 ['delete oldsmall.boot;copy newsmall.boot _ small.boot; '] '']) + 'ftp maxc Login/c yourname yourpassword directory/c alto retrieve/c packmu.run ramload.run;Resume small.boot;Ramload/N Byterp.mb/F 1000/A;Smalltalk.run'.option=1 [(VirtualMemory new) giveBirth3. user quit]Vmem ramwrite: (dp0 oldFile: 'byterp.mb').Vmem surgery: (dp0 oldFile: 'Smalltalk.run').6. after a successful vmem write or surgery, execute this (selecting here is tricky or type in a Dispframe)	user systemStartup.7. edit lastversion (and Smalltalk password) and execute the following, then close this window (clean up screen for non-xm?), and quit. it then renames old versions of files, stores new versions of files, e.g. remote XmSmall.Boot becomes XmSmall.Boot.5.5g and local Small.Boot becomes remote XmSmall.Boot	| lastversion dir file remotefile.	lastversion _ '5.5j'.	dir _ phylum asFtpDirectory.	dir login: 'Smalltalk' password: 'password'.	for file from: ('Small.Boot' 'Smalltalk.Syms') do [		remotefile _ ([user hasXM ['Xm'] '']) + file.		dir rename: remotefile newName: remotefile + '.' + lastversion;			store: file as: remotefile].	(dp0 file: 'rem.cm') append: dir commands; cr; close.	user releaseMessage."\b18B1i31bI2Bi515I37u1U321u21U264b1Bi107I23b1Bi304I52u4U68u8Usystemworkspace3		"for system releasers only!!!8. to update press files for system categories or cross reference listing directly on Phylum, browse or spawn this window.  edit pf to specify a list of system categories to print, usually from step 1, e.g. user changedCategories: ('Basic Data Structures' ...) or SystemOrganization categories (for all); delete toPrinter if you don't want the press files printed. edit xref to be user classNames if you want to generate a cross reference listing.	 | pf xref cat.	pf _   ('Text Objects' 'Kernel Classes' 'Press File Support' 'IFS File System' 'Alto File System' 'Panes and Menus' 'Files' 'Juniper' 'Windows' 'Graphical Objects' 'Numbers' 'Basic Data Structures' ).	xref _ ().	user releaseExternalViews.	phylum name: 'Smalltalk' password: 'password'.	for cat from: pf do [		((phylum file: (cat + '.Press') asFileName) asPressPrinter) stamp;			printclass: (SystemOrganization category: cat); close; toPrinter].	xref empty []	user printCrossReference: xref on: (phylum file: 'CrossReference.Press')."(635)\b18B1i29I2b2Bi447I23u195U10u3U68u8U153u11Uworkspace	[user notify: 'Not meant to be executed']"XEROX - Learning Research Group user screenextent: 640580 tab: 050.NotifyFlag _ true.Changes init.user changedMessagesuser changedClassesuser changedCategoriesUndeclared contentsto set the default printerPrinterName_'Menlo'.PrinterName_(PressFile new) selectPrinter: PrinterName.to change phylum to access your accountuser releaseExternalViews. phylum name: 'name' password: 'password'.dp0 filin: ('Changes.st').(dp0 file: 'changes.st') filout.(dp0 file: 'xxx') edit.dp0 pressfilin: ('xxx.press').(dp0 filesMatching: '*.st') sortdp0 list. dp0 freePagesdp0 delete: 'old'dp0 rename: 'old' newName: 'new'for reinitializing Sources and phylumSources release. phylum release. Sources reopen.to make Smalltalk Sources local | s. s _ 'Smalltalk.Sources.'.(phylum asFtpDirectory) retrieve: '<Smalltalk>' + s + user versionName as: s; close.Sources on: (dp0 file: s).to switch back to remote SourcesSources close; on: (phylum file: '<Smalltalk>Smalltalk.Sources.' + user versionName).to filin a remote Smalltalk filephylum filin: ('<Small-goodies>NotifyChange.st').to print a remote/local press file(phylum pressfile: '<Smalltalk>xxx.press') toPrinter.(dp0 pressfile: 'xxx.press') toPrinter: 'Lilac'.File noChanges.BitRect new fromuser; edit.user schedule: (defaultBitRectEditor newframe).DocumentEditor new defaultdocument: 'test'.DocumentEditor new init: (Document new fromPress: 'test.document').user releaseExternalViews.E sleep. E kill. E _ nil.E _ Etherworld new. E broadcastFilter: true. E wakeup.Sources reopen.for primary Smalltalk access to file servers and printers at other sites.substitute yourserver for phylum above, compile this workspacePrinterName _ 'name-of-your-printer'.Smalltalk declare: yourserver.yourserver _ ILFileDirectory new directory: 'name-of-your-server'.yourserver name: 'Smalltalk-User' password: 'Smalltalk'.Sources on: (yourserver file: '<Smalltalk>Smalltalk.Sources.' + user versionName).Changes init.user Swat."c(500)\b11B44f2 5f0 3b23B59i1I98i27I79i40I296i38I50i31I146i32I89i32I53i34I311i1I125i137Iversion ['Smalltalk 5.5k ' + [user hasXM ['XM '] ''] + 'November 20?']"user versionlow level disk address calculations are more general (necessary for 14-sector Dorado/Dolphin file systems)better error recovery for broken and timed out Leaf connectionsAltoFileDirectory disk page allocation/deallocation bugs fixedmiscellaneous printing fixesJuniper fixes (2)goodie: again-del-forget.stPhylum account changes 	default Leaf connection is logged in to <Smalltalk-User>	system release uses [Phylum]<Smalltalk-76> instead of [Ivy]<Smalltalk>see UserView workspace for logging into your account on Phylum, changing default printerSeptember 3, 5.5j	duplicate packet fix	fixes to ether (routing table, name lookup, phylum, Int32), printer names,		files, UserView time messages, context simulation,		replace in BitBlt & Paragraph, NotifyWindow cleanup,		Class code: always decompiles with left shift key, window printing fixes,		SystemOrganization globalComment contains no nulls	the following changes files were included:	[phylum]<small-goodies>		5.5i.changes.st, notifychange.st, window-print-changes.st	[phylum]<findit>5.5i.more.changes.st	[maxc]<dolbec>int32change.st	[maxc>ingalls>fixes.st	[ivy]<kaehler>context-simulation.st	[ivy]<borning>context-changes.stMay 1, 5.5i	obscure file bugs eliminated; version features added (goody: File-version.st).	Ifs multiple connections fixed; Ifs error numbers looked up in Ifs.Errors.	duplicate packets eliminated at lowest level.	Int32 primitive fix. Juniper retransmit parameters increased	Integer compare: LargeInteger now works	CodePane/FilePane 'print' (within a CodeWindow) now prints entire Paragraph		rather than only part within window	ScrollBars hide during CodePane again & cancel. cancel saves your old text, so		an immediate undo will replace the current selection with your previous text.April 11, 5.5h	Alto file names limited to 39 characters ('somestring' asFileName will fix		name, truncating if necessary). other misc. file, ether, simulator fixes.	BitBlt fixed so that BitRects don't lose their bits	BitBlt used to speedup reading&writing files, sending Press files to printers	ParagraphScanner puts underlining into Press files	printer names updated (PressFile classInit). hashing-changes.st included.	after font cataclysm, get new version of Fonts.Widths before printing	system release procedure modifiedMarch 6, 5.5g	ether, file, vmem writing fixes.  cursor clipping on screen boundary.	BitBlt used for String growing, copying, replacing	goodies included: display-off-after-notify.st, CodePane-doit.st,		context-simfix2.st, ILchanges.st, string-changes.stsee [Phylum]<Smalltalk> for the following files.  () surround an optional prefix or suffix.	Document.Press		mini-guide to Smalltalk system and user interface	VersionHistory		information about versions up to 5.5g	ChangedMessages		a list of  messages which have changed	xxx.Press		press file for CrossReference or for system category 'xxx' in current version		to save paper, consider consulting the LRG alcove copies	(Xm)Small.Boot(.version)	(Xm)Smalltalk.Syms(.version)		older versions of .Boot and .Syms are explicitly named.	Smalltalk.Sources.version		all Smalltalk.Sources (including the current one) are explicitly named[Phylum]<Small-Goodies> contains miscellaneous bug fixes and new features (and even some documentation: goodies.bravo, .press) offered by the community of Smalltalk Users."(635)\b8B13b4B33b12B571b18B628b12B454i14I2i6I40i4I62b15B518b13BSystem quit/resume\f5boverlay: fileid | t [	dp0 stampBoot.	self releaseExternalViews.	"put the ethernet to sleep"	[Enil [] E sleep].	"turn off display during quit/resume"	t _ mem0420. mem0420 _ 0.	self InLd: fileid.	"we start here after a resume"	mem0420 _ t.	while user keyset>0 do [user show: 'The keyset is stuck'; cr]]\b16B53i25I27i35I54i28I(500)'From Smalltalk 5.5j+ XM September 18 on 20 October 1980 at 1:03:32 pm.'(635)"HalfToner"z20000l15000\f5bClass new title: 'HalfToner'	subclassof: Object	fields: 'lines pixelsPerLine black white errorString rect vect inpix outpix nlines npix strm inset'	declare: '';	asFollows\f5bThis class converts ais image files to screen bits\iAIS to Bits\f5bdecode: str using: s | i j k x cascadeRight cascadeDiag val error r msk masks	["Change 8-bit grey from str filling s"	 masks_(128 64 32 16 8 4 2 1).	 cascadeRight_0.	 cascadeDiag_errorString1.	 i_msk_j_k_1. x_0-outpix.	 s1_0.	 for i to: pixelsPerLine do		[while x<0 do			[val_(stri)-black.			[(error_cascadeRight-val)0				["print Black" sj_masksmsk+(sj). (error>white)[error_white] ]				"print White" (error_error+white)<0[error_0] ].			error_error/2.			val_error/2.			errorStringk_cascadeDiag+val.			cascadeRight_errorString(k+1)+error.			cascadeDiag_val.			[(msk_msk+1)>8[msk_1. j_j+1. sj_0] ].			x_x+inpix. k_k+1].		x_x-outpix].	s]  primitive: 109\b21B60i37I226i13I56i13I246b2BdoFile | str i s2 r y skipsum	[str_String new: pixelsPerLine.	r_00 rect: (pixelsPerLine*outpix/inpix)1. r moveto: rect origin copy.	s2_String new: 1+((pixelsPerLine*outpix)/(8*inpix)).	vect_Vector new: lines. strm reset; position_2048+(inset y*npix). "crop top"	i_1. y_0-outpix. skipsum_0.	while ilines do		[skipsum_skipsum+inset x. "inset left"		strm skip: skipsum. skipsum_0. "do all tallied skips prior to next read"		strm into: str endError: true.		r bitsFromString: (self decode: str using: s2).		skipsum_skipsum+npix-(pixelsPerLine+inset x).		r origin y_r origin y+1. r corner y_r corner y+1.		[(y_y+inpix)0 "next line?"			[i_i+1. y_y-outpix.			while (y0 and ilines) do [i_i+1. y_y-outpix. skipsum_skipsum+npix] ]			skipsum_skipsum-npix] ]. "not next line"	strm close]\b7B250i10I78i12I34i41I202i12I129i15IintoPress: p file: f | outrect "Creates an external file reference"	[outrect_p transrect: rect.	p setp: (outrect origin); dots		[p setcoding: 8 "byte samples" dots: npix lines: nlines;		setmode: 3 "to right and to bottom of page";		setwindowwidth: pixelsPerLine height: lines			skipdots: (inset x) skiplines: (inset y);		setsizewidth: (outrect width) height: (outrect height);		dotsfromAIS: f] ]"	|p. p_dp0 pressfile: 'pix.press'.	p pictureinit. (HalfToner new test) intoPress: p file: 'Rolfup.AIS'. p close."\b21B10i36I81i14I40i32IInit/Access\f5bnlines [nlines]\b7B1b7Bnpix [npix]\b5B1b5Brect [rect]\b5B1b5Brect_rect\bsetup: strm | inrect croprect	[strm readonly.	(strm word: 2)1024 or (strm word: 9)8[user notify: 'bad file']	nlines_lines_strm word: 4.	npix_pixelsPerLine_strm nextword.	black_0. white_255.	inrect_00 rect: pixelsPerLinelines.	inrect moveto: rect origin.	inrect usermove; comp. "show whole"	croprect_rect copy.	croprect moveto: inrect origin copy.	croprect maxstretch: inrect.	croprect userstretch: inrect.	inrect comp.	inset_croprect origin-inrect origin.	pixelsPerLine_croprect width.	lines_pixelsPerLine*rect height/rect width.	[rect width>pixelsPerLine		["blowup" inpix_32. outpix_(32*rect width/pixelsPerLine)]		"shrink" outpix_32. inpix_(32*pixelsPerLine/rect width)].	errorString_String new: pixelsPerLine*outpix/inpix+2.	errorString all_0]\b12B279i12I280i8I51i8Istrm [strm]\b5B1b5Btest | files	[files_(dp0 filesMatching: '*.ais.') sort.	files empty[user notify: 'no .ais files on disk']	strm_dp0 file: (files(Menu new stringFromVector: files) zbug). strm readonly.	rect_Rectangle new usersize. self setup: strm; doFile]"HalfToner new test."\b5BSystemOrganization classify: HalfToner under: 'Graphical Objects'.Class new title: 'PressFile'	subclassof: Object	fields: 'DL "<File> stores data list"		EL "<Set> accumulates entity list"		parts "<Set> accumulates part directory"		DLstart "<Integer> position of current entity in DL"		ELstart "<Integer> word position of current entity in EL"		Pstart "<Integer> record position of current page in DL"		eorigin "<Point>"		scale "<Integer> micas per Alto screen dot"		boundbox "<Rectangle> bounding box for current page"		fontcodes "<Vector> of run codes corresponding to current fonts"		fontdefs "<Vector of WidthTables> corresponding to fontcodes"		estate "<Vector> some entity state to avoid setting duplicate values"		FL "<Set> accumulates strings for Ext. File part" '	declare: 'prevstyle SMentity recordsize printers printerMenu ';	asFollows\f5bInitialization\f5bof: DL [	EL _ Set new string: 200.	FL _ Set new string: 40.	parts _ Set new string: 40.	fontcodes _ Vector new: 0.	fontdefs _ Vector new: 0.	estate _ Vector new: 3 "font, spacex, spacey, ...".	prevstyle_ nil.	self scale: PressScale;		startPage]\b7BEntity/Page/File Commands\f5bclose | p i font [	DL writingfalse [DL close]	self closePage.	partsfalse or parts empty []	"if present, include the external file part  --- added Sept 80"	[FL empty[]	self part [DL append: FL] code: 2.	FL reset.	self padpage].	"put font names and descriptions into font directory (part)"	self part [		for i to: fontdefs length do [			font _ fontdefs  i.			DL nextword_ 16; nextword_ i-1;				next _ font min; next _ font max.			self Bcpl: font name pad: 20.			DL next _ font face; next _ font min;				nextword _ font pointsize; nextword_ 0]]		code: 1.	"write part directory. Pstart is current page position"	DL append: parts asReadStream.	self padpage.	p _ self recordnum.	"document directory"	DL nextword_ 27183; "press password"		nextword_ p + 1 "number of records";		nextword_ parts position / 8 "number of parts";		nextword_ Pstart; "part dir and length"		nextword_ p - Pstart;		nextword_ 1; "backpointer to obsolete doc dir"		append: user timewords; "2 time words"		nextword_ 1; "first and last copies"		nextword_ 1;		nextword_ 1; "first and last pages"		nextword _ 1;		nextword _ 'S'1 "solid color (looked at by color printers)";		next: 2*(0177-12) _ 0377.	p _ user now.	self Bcpl: self name pad: 52;		Bcpl: [currentProfilenil [dp0 diskID1] currentProfile printedBy] pad: 32;		Bcpl: [((String new: 40) asStream) print: p1; space; print: p2; contents] pad: 40;		padpage.	DL close.	parts reset]\b6B96i61I83i60I280i53I73i18I23i16I19i19I33i17I22i21I42i31I58i23I32i24I36i41IBitmaps/Dots\f5bAIS: file width: w height: h croprect: r at: pt scale: s	[self setp: (self transpt: pt); dots		[self setcoding: 8 "byte samples" dots: w lines: h;				setmode: 3 "to right and to bottom of page";				setsizewidth: (s*r width*scale) asInteger					height: (s*r height*scale) asInteger;				setwindowwidth: r width height: r height					skipdots: r minX skiplines: r minY;				dotsfromAIS: file]]"(dp0 pressfile: 'pix.press') somefont; AIS: 'girl.ais' width: 512 height: 512 croprect: (5050 rect: 500500) at: 3680 scale: 0.65; close."\b58BdotsfromAIS: file | f	[f_file length inString+file+[file length even[' ']'']. "BCPLize"	DL nextword _ 4; nextword _ 4; append: f. FL append: f]\b18Bsetwindowwidth: w height: h [	self setwindowwidth: w height: h skipdots: 0 skiplines: 0]\b28Bsetwindowwidth: w height: h skipdots: sd skiplines: sl	[DL nextword _ 1;		nextword _ sd; nextword _ w;		nextword _ sl; nextword _ h]\b56BPrivate\f5bclassInit | a p ["PressFile classInit."	Smalltalk declare: PressScale as: 32.	recordsize _ 512.	SMentity _ 5.	a _ (String new: 250) asStream."from [Maxc1]<Altodocs>NetTopology.Press, October 1980. in order of net number"	printers _ (		"net #"	"printer names"		" 1"		'Navajo'			"HENRIETTA"		" 3"		'Menlo' 'Clover' 'Lilac' "PARC: BLDG 35, FLOOR 2"		" 5"		'Kanji'					"PARC:  BLDG 34"		" 6"		'Wonder' 'Quake'	"PARC: BLDG 35, FLOOR 1&3"		"10"		'Puff'					"A&E"		"12"		'White' 'Colorado'	"PASADENA"		"14"		'Niagara' 'Tioga'		"WEBSTER"		"20"		'Yoda'			"PARC: BLDG 32"		"21"		'Lily' 			"SPG"		"23"		'Ranger'			"DALLAS"		"26"		'Windfall'		"DC"		"27"		'Genesee'		"WEBSTER"		"33"		'Amarok'		"TORONTO"		"34"		'Yankee'		"STAMFORD"		"36"		'Cyclops'		"LEESBURG"		"54"		'Rover'			"A&E"		"55"		'SPGEng' 'Emperor'		"A&E"		"56"		'Thud'				"A&E"		"60"		'Adelie' 'Daisy' 'RockHopper' 	"BAYHILL"		"62"		'Bud'				"?"	).	for p from: printers do [a append: p; cr].	a append: 'same printer'; cr; append: 'no printer'.	printerMenu _ Menu new string: a contents]\b10BSystemOrganization classify: PressFile under: 'Press File Support'.PressFile classInitRectangle asFollows\f5bAltering\f5bmaxstretch: bound | bx by boundr selfr	[bx_(bound corner-origin) x. by_(bound corner-origin) y.	boundr_bx asFloat/by. selfr_self width asFloat/self height.	selfr>boundr[self extent_(bx(bx asFloat/selfr) asInteger)]		self extent_((by asFloat*selfr) asIntegerby)]\b18Busermove 	[self usermove: user screenrect]\b11Busermove: bound | m lim	[lim_bound corner-self extent. self bordercomp. m_user mp.	while true do		[[user redbug			[self bordercomp; moveto: (bound origin max: ((m_user mp) min: lim)); bordercomp]].		while (user anybug and m=user mp) do [].		[user bluebug[user waitnobug. self bordercomp]]]]\b16Busersize 	[self usersize: user screenrect]\b11Busersize: bound | m lim	[[self originnil[origin_user mp. self extent_16]].	self bordercomp. m_user mp.	while true do		[lim_bound corner-self extent.		[user redbug			[self bordercomp; moveto: (bound origin max: ((m_user mp) min: lim)); bordercomp]].		[user yellowbug[self bordercomp.				corner_m_(user mp min: bound corner) max: origin. self bordercomp]].		while (user anybug and m=user mp) do [].		[user bluebug[user waitnobug. self bordercomp]]]]\b16BFtpDirectory asFollows\f5bFileDirectory\f5bstore: s | t [	s is: Vector [for t from: s do [self store: t]]	command append: ' Store/C '; append: (self checkName: s)]\b9Bretrieve: s | t [	s is: Vector [for t from: s do [self retrieve: t]]	command append: ' Retrieve/C '; append: (self checkName: s)]\b12Bdpj name: 'Smalltalk2' password: 'LRG'.'From Smalltalk 5.5k XM November 15 on 18 November 1980 at 12:30:40 pm.'JuniperInterface asFollows\f5bFILE DIRECTORY (restricted)\f5bInsert: pFile"...issues a 'create file' request to the Juniper file server and sets the returned long file handle and name in pFile (a JuniperFileController)."	| tRequest tResult[	tRequest _ self newRequestParameterBlock.  "1"	tRequest longInteger: 2 _ 0 "user rawtotalsecs".  "1.5"	tRequest nextDataBlockString _ (self checkDirectory: (pFile name)).  "2"	tRequest nextDataBlockString _ ''.  "3"	tResult _ self doAction: sCreateFile requestPrs: tRequest.  "4"	pFile		longFileHandle: tResult nextDataBlockString;		name: tResult nextDataBlockString.  "5"]"1. Create a new request parameter block.1.5 Set creation date (to default (current) -- later some specific date&time?)2. Get the file name from pFile, add the default directory name to it if necessary, and write it in the request parameter block.3. Blank the file server field of the request parameter block.4. Issue a 'create file' request and get the result parameter block.5. Set the long file handle and name (from the result parameter block) in pFile." \b14B146b2B18b1BMISC (internal)\f5blogin: pName password: pPassword"...sets the necessary request parameters and invokes doLogin to issue a login request.  pName (a String) specifies the name of an account on the Juniper file system.  pPassword (a String) specifies the password of the account."	| tRequest[	tRequest _ self newRequestParameterBlock.  "1"	tRequest		leader: 3 _ sLogin;  "2"		leader: 4 _ 512;  "3"		leader: 5 _ 7;  "4"		leader: 6 _ (self hash: pPassword);  "5"		nextDataBlockString _ pName;  "6"		pupType _ sCustodian.  "7"	 (self doLogin: tRequest)  "8"]"1. Create a new request parameter block.2. Set the command to Login.3. Set the number of bytes per page to 512.4. Set the Juniper version number to 7 (Nov 80).5. Set the hashed account password to pPassword hashed.6. Set the account name to pName.7. Set the packet pup type to custodian.8. Issue the request and return the result."\b33B228b2B10b1BParagraphEditor asFollows\f5bEditing\f5bagain  | many	[many_ user leftShiftKey.	[self fintype [Scrap _ Scrap text. self select]].	many[while self againOnce do []]	self againOnce[] frame flash]\b7BagainOnce  | t	[t _ para findString: Deletion startingAt: c2.	t=0 [false]	self unselect.	c1 _ t.	c2 _ c1 + Deletion length.	self replace: Scrap; selectAndScroll]\b11BPublic Messages\f5bkbd | more char "key struck on the keyboard"	[c1<c2 and self checklooks[self show complement]	more _ Set new string: 16.	[begintypein[] Deletion _ self selection. begintypein _ c1].	while (char _ user kbdnext) do [		char		=bs ["backspace"			more empty [begintypein _ begintypein min: (c1 _ 1 max: c1-1)]			more skip: 1];		=cut [self fintype. [c1=c2[c2_ c1+1 min: para length+1]].				self replace: nullString; complement. Scrap _ Deletion. self];		=paste [self paste];		=ctlw ["ctl-w for backspace word"			[more empty [] self replace: more. more reset. c1 _ c2].			c1 _ 1 max: c1-1.				while [c1>1 and (para(c1-1)) tokenish] do [c1 _ c1-1].			begintypein _ begintypein min: c1];		=esc ["select previous type-in"			[more empty[self unselect]			self replace: more. c1 _ c2].			self fintype.			c1 _ c2-Scrap length.			self complement]		"just a normal character"	more next_ char].	self replace: more.	c1 _ c2.	self selectAndScroll]\b4B237i9I254i24I196i23I132i23I'From Smalltalk 5.5i XM May 1 on 18 November 1980 at 12:37:46 pm.'Class asFollows\f5bMessage access\f5bderstands: selector | c		"overstands?  undersits? - forget it"	[selector is: Vector[for c from: selector do [self derstands: c]]	(messagedict has: selector)false[] 	messagedict _ messagedict delete: selector.	self organization delete: selector.	lastClass _ lastSelector _ lastParagraph _ nil.	[Changes has: (c_title+' '+selector) [Changes delete: c]].	Changes insert: (c_'~'+c).	c]\b20B5i37Iinstall: name method: method literals: literals		code: code backpointers: backpointers | c	[messagedict _ messagedict insert: name method: method		literals: literals code: code makeBoldPattern backpointers: backpointers.	lastClass _ self.	lastSelector _ name.	lastParagraph _ code.	Changes insert: (c_title+' '+name).	Changes has: (c_'~'+c)[Changes delete: c]]\b93BFilin and Filout\f5bnoChanges | s t	[t_ title+' *'.	for s from: Changes contents do		[(s1=126 "~" and (t match: s(2 to: s length)))		 or (t match: s)			[Changes delete: s]]]\b10BParagraphPrinter asFollows\f5bClass stuff\f5bprintchanges: lis | selector class heading old mes s delFlg	"prints Changes format: ('class message' 'class message' ...)	or alternate format: (class (message ...) class () ...) or both	If an element appears in the list of the form '~class message', this puts out a 	line causing the system to forget that method.  These come after any additons,	owing to the sort on Changes"  [lis empty [lis]	user displayoffwhile [	lis _ lis asStream.	old _ mes _ false.	while class do [		"get next class, selector pair"		[delFlg_ false.		mes and (selector _ mes next) ["more of alternate form"]		s _ lis next [			s is: UniqueString [				class _ Smalltalk lookup: s.				mes _ lis next asStream.				selector _ mes next]			"Changes format"			s _ s asStream.			[s peek=126 "~"[s next. "take it off stream" delFlg_ true]].			class _ Smalltalk(s upto: 040) unique.			selector _ s upto: 040.]		class _ false].		delFlg[self printForget: selector class: class]		"same, different or no class"		[old  class []		[old [old endCategoryOn: self; endChangesOn: self]].		class  false ["finished"]		user cr; show: class title.		old _ class.		class startChangesOn: self.		heading _ 'As yet unclassified'].		classfalse []		user space; show: selector.		s _ class organization invert: (selector _ selector unique).		s[[s  heading[class startCategory: (heading _ s) on: self]].		class printMethod: selector on: self]]]]\b18B44i22I40i20I36i200I112i29I56i22I137i14I353i8IprintForget: selector class: class	"Print a line that causes a message to be forgotten"	[user cr; show: '~'+class title+' '+selector.	self print:		(class title + ' derstands: ' + selector + '.') asParagraph]\b36BForm asFollows\f5bFILING\f5bread: filename | f strip w h form stripheight leftoverlines i	["Reads the Form from the disk in the format width,height,bits."	f_ dp0 oldFile: filename.	f readonly.	w _ f nextword.	h _f nextword.	extent _ wh.	w*h < 64000		[bits _ (Form new extent: extent) bits.		f into: bits.		f close.		]	f close.	user notify: 'too many bits to be a Form'.	]\b15BBitRect asFollows\f5bFilin and filout\f5bfilin: title | f i x y rect strips  "read bits from a file"	[f_dp0 oldFile: (title concat: '.pic.').	f readonly.	f end[f close. user notify: 'no data']	x_f nextword.  y_f nextword.	rect_Rectangle new origin: [origin is: Point[origin] 00] extent: xy.	self title: title in: rect.	stripheightf nextword[user notify: 'strip heights dont match']	strips _ self strips.	for i to: strips length do		[f into: datai].	f close]\b13B23i23I