-- TempFileManager.mesa-- created by Schroeder, November 18, 1980  9:19 PMDIRECTORY  crD: FROM "CoreDefs",  exD: FROM "ExceptionDefs",  intCommon: FROM "IntCommon",  ovD: FROM "OverviewDefs",  Storage,  String,  tfD: FROM "TempFileDefs";TempFileManager: MONITOR  IMPORTS crD, exD, intC:intCommon, Storage, String  EXPORTS tfD  = BEGINTempFile: TYPE = RECORD[c: CARDINAL, h: crD.UFileHandle,  n: POINTER TO TempFile];alloc: POINTER TO TempFile _ NIL; --checked out temp filesfree: POINTER TO TempFile _ NIL; --freed temp filestmpFileCntr: CARDINAL _ 100;AllocateTempFile: PUBLIC ENTRY PROCEDURE    RETURNS [crD.UFileHandle] =BEGINt: POINTER TO TempFile;fnm: STRING _ [10];erc: ovD.ErrorCode;IF free = NIL  THEN BEGIN -- generate a new temp file node    t _ Storage.Node[SIZE[TempFile]];    IF (tmpFileCntr _ tmpFileCntr - 1) = 0 THEN exD.SysBug[];    t.c _ tmpFileCntr;    END  ELSE BEGIN -- take one from free list    t _ free;    free _ t.n;     END;t.n _ alloc;alloc _ t;String.AppendString[fnm, "DMS-"L];String.AppendDecimal[fnm, t.c];String.AppendString[fnm, ".TMP"L];[erc, t.h] _ crD.OpenFile[intC.user, fnm, update];IF erc # ovD.ok THEN exD.SysBug[];RETURN[t.h];END; -- of AllocateTempFile --FreeTempFile: PUBLIC ENTRY PROCEDURE [h: crD.UFileHandle] =BEGINcurrent: POINTER TO TempFile;previous: POINTER TO TempFile _ NIL;FOR current _ alloc, current.n UNTIL current = NIL DO  IF current.h = h THEN EXIT;  previous _ current;  REPEAT FINISHED => exD.SysBug[];  ENDLOOP;IF previous = NIL  THEN alloc _ current.n  ELSE previous.n _ current.n;current.n _ free;free _ current;IF crD.UFileLength[current.h].lastPage > 3  AND crD.UFileTruncate[4, 0, current.h] # ovD.ok    THEN exD.SysBug[];IF crD.CloseFile[current.h] # ovD.ok THEN exD.SysBug[];current.h _ NIL;END; -- of FreeTempFile --END.