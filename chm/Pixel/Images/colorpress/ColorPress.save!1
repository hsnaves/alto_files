-- File:  ColorPress.mesa: this pack reads Press.bits and writes ColorPress.bits. ColorPress.bits must already exist. The output can be used to drive an n-Color laser printere1(1792)\i-- Last Edited:  November 5, 1981  11:38 AM   By:  GWilliams e1\ie1DIRECTORYe1AltoRam USING[DoSilentBoot],l4269d3634e1ImageDefs USING [StopMesa],l4269d3634e1IODefs USING[--CR, NUL, SP, TAB, ReadChar, WriteChar, WriteString,-- WriteLine],l3634e1k72(635)\13i55IPressDefs USING [filePtr, Init, numPages, pageGarray],l4269d3634e1(1792)ColorPressDefs USING [filePtrOut, InitPage],l4269d3634e1SystemDefs USING [FreeHeapNode],l4269d3634e1TridentDefs USING [PAGE, tfsdskPtr, TfsCloseDisk, VDA];l4269d3634e1l4269d3634e1l4269d3634e1ColorPress: PROGRAM	IMPORTS AltoRam, ImageDefs, IODefs, PressDefs, SystemDefs, TridentDefs	EXPORTS PressDefs =BEGIN OPEN AltoRam, IODefs, PressDefs, SystemDefs, TridentDefs;serverMode: PUBLIC BOOLEAN _ FALSE;uCodeLoaded: PUBLIC BOOLEAN _ FALSE;BitsWord: TYPE = MACHINE DEPENDENT RECORD	[B15, B14, B13, B12, B11, B10, B9, B8, B7, B6, B5, B4, B3, B2, B1, B0: BOOLEAN	];ColorEnum: TYPE = {cyan, magenta, yellow};l2999e1k72(635)\b10B366b1Bl2999e1k72abortFile: PUBLIC ERROR=CODE;l2999e1k72\b9BCPress: PROC[] ={	bitPageNumber: CARDINAL;	continue: BOOLEAN;	diskIn, diskOut: tfsdskPtr;	firstDa: PAGE;	firstVDAIn, firstVDAOut: VDA;	i: CARDINAL;	WriteLine["Color Press Bits creator, writes to file ColorPress.bits"];  	--don't read Com.cm	[diskIn, firstVDAIn, continue]_Init[];		--load global settings from Press.state and open trident	IF ~continue THEN GOTO done;	[diskOut, firstVDAOut, continue, filePtrOut]_InitOutFile[];l2999e1k72(0,3648)(1,4269)(2,4904)(3,9888)\b6B221i3I1i20I41i28I5i23I	bitPageNumber _ pageGarray[0].BitPage;	--for debugging	firstDa _ LOOPHOLE [firstVDA];		FOR i IN [0..numPages)			DO			firstBand _ MIN[pageGarray[0*i].FirstBand, MIN[pageGarray[1*i].FirstBand, pageGarray[2*i].FirstBand]];			lastBand _ MAX[pageGarray[0*i].LastBand, MAX[pageGarray[1*i].LastBand, pageGarray[2*i].FirstBand]];			FOR color: INTEGER IN [0..3)				DO				InitPage[diskOut, color, i];	--initializes outgoing pageG 's, globals,  and synchronizes reading 				ENDLOOP;			--use nColors PageG's per real page			FOR scanLineNum IN [0..totalScans)	--totalScans is union of all 3 colors				DO				cyan _ GetNextByte[diskOut, scanLineNum, scanLineLength, cyan];				ENDLOOP;			ENDLOOP;	ENDLOOP;--Clean up	FreeHeapNode[pageGarray];	[]_TfsCloseDisk[diskOut, TRUE];	--free ddMgr	[]_TfsCloseDisk[diskIn, TRUE];	--free ddMgrEXITSdone => NULL;l2999e1k72(635)\40i15I347i68I18i36I38i37I111i13I59i12I33i12I23i};--Procedure Press--Mainline code	CPress[];	ImageDefs.StopMesa[];	--put into main program later.l2999e1k72\4i10I5i1I4i14I12f1 10f0 11iEND. -- CPressl2999e1k72\i1I5i3I