-- File:  ColorPress.mesa: this pack reads Press.bits and writes ColorPress.bits. ColorPress.bits must already exist. The output can be used to drive an n-Color laser printere1(1792)\i-- Last Edited:  November 6, 1981  1:50 PM   By:  GWilliams e1\ie1DIRECTORYe1ImageDefs USING [StopMesa],l4269d3634e1IODefs USING[--CR, NUL, SP, TAB, ReadChar, WriteChar, WriteString,-- WriteLine],l3634e1k72(635)\13i55IPressDefs USING [filePtr, Init, numPages, pageGarray],l4269d3634e1(1792)ColorPressDefs USING [diskIn, diskOut, filePtrOut, InitPage],l4269d3634e1SystemDefs USING [FreeHeapNode],l4269d3634e1TridentDefs USING [PAGE, tfsdskPtr, TfsCloseDisk, VDA];l4269d3634e1l4269d3634e1l4269d3634e1ColorPress: PROGRAM	IMPORTS AltoRam, ImageDefs, IODefs, PressDefs, SystemDefs, TridentDefs	EXPORTS PressDefs =BEGIN OPEN AltoRam, IODefs, PressDefs, SystemDefs, TridentDefs;serverMode: PUBLIC BOOLEAN _ FALSE;uCodeLoaded: PUBLIC BOOLEAN _ FALSE;ColorEnum: TYPE = {magenta, yellow, cyan};l2999e1k72(635)\b10Bl2999e1k72abortFile: PUBLIC ERROR=CODE;CPress: PROC[] ={	bitPageNumber: CARDINAL;	continue: BOOLEAN;	firstDaIn: PAGE;	firstVDAIn, firstVDAOut: VDA;	i: CARDINAL;	WriteLine["Color Press Bits creator, writes to file ColorPress.bits"];  	--don't read Com.cm	[diskIn, firstVDAIn, continue]_Init[];		--load global settings from Press.state and open trident	IF ~continue THEN GOTO done;	[continue] _ InitOutFile[];--set up outgoing pageG array	IF ~continue THEN GOTO done;--don't need to close the input disk as we're exiting the program.l2999e1k72(0,3648)(1,4269)(2,4904)(3,9888)\b9B21b6B194i3I1i20I41i28I5i23I60i29I30i66I	firstDaIn _ LOOPHOLE [firstVDA];--don't need		FOR i IN [0..numPages)			DO			[totalScans, scanLenOut] _ InitPage[diskOut, i];	--initializes outgoing pageG 's, globals,  and synchronizes reading 			--use nColors PageG's per real page			FOR scanLineNum IN [0..totalScans)	--totalScans is union of all 3 colors				DO				FOR scanLenIx: CARDINAL IN [0..scanLenOut)					DO					magentaWord _ GetNextWord[scanLineNum, magenta];					yellowWord _ GetNextWord[scanLineNum, yellow];					cyanWord _ GetNextWord[scanLineNum, cyan];					mask _ 100000B;					FOR j: CARDINAL IN [0..15]						DO						PutBit[BITAND[magentaWord, mask]];						PutBit[BITAND[yellowWord, mask]];						PutBit[BITAND[cyanWord, mask]];						mask _ BITSHIFT[mask, -1];	--shift right by 1						ENDLOOP;	--for j: CARD..					ENDLOOP;	--for scanLenIx..				ENDLOOP;	--for scanLineNum				WriteScanLine[scanLineNum];	--see if at band bound; re-init etc.			ENDLOOP;	--for i IN ..	CloseOutFile[];	--write out the first page (pageG's etc.) and close the Disk.--Clean up	FreeHeapNode[pageGarray];		--this is the input file's pageGarray	[]_TfsCloseDisk[diskIn, TRUE];	--free ddMgrEXITSdone => NULL;l2999e1k72(635)\33i12I85i68I4i36I38i37I431i18I16i15I15i17I14i17I33i36I13i13I1i1I15i75I27i37I33i12I23i};--Procedure Press--Mainline code	CPress[];	ImageDefs.StopMesa[];	--put into main program later.l2999e1k72\4i10I5i1I4i14I12f1 10f0 11iEND. -- CPressl2999e1k72\i1I5i3I