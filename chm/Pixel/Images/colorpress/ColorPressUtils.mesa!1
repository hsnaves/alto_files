-- File:  ColorPressUtils.mesae1(1792)\i-- Last Edited:  November 6, 1981  2:00 PM   By:  GWilliams e1\ie1DIRECTORYe1AltoRam USING[DoSilentBoot],l4269d3634e1ImageDefs USING [StopMesa],l4269d3634e1IODefs USING[--CR, NUL, SP, TAB, ReadChar, WriteChar, WriteString,-- WriteLine],l3634e1k72(635)\13i55IPressDefs USING [copies, filePtr, Init, LockNeededCode, numPages, pageGarray, PrintInit, PSlot, ReadCommandFile],l4269d3634e1(1792)ColorPressDefs USING [ColorEnum],l4269d3634e1PressNetDefs USING [GetBits],l4269d3634e1SystemDefs USING [FreeHeapNode],l4269d3634e1TridentDefs USING [PAGE, tfsdskPtr, TfsCloseDisk, VDA];l4269d3634e1l4269d3634e1l4269d3634e1ColorPressUtils: PROGRAM	IMPORTS AltoRam, ImageDefs, IODefs, PressDefs, ColorPressDefs, SystemDefs, TridentDefs	EXPORTS ColorPressDefs =BEGIN OPEN AltoRam, IODefs, ColorPressDefs, PressDefs, SystemDefs, TridentDefs;	firstBand, LastBand: CARDINAL;	bitMargin: CARDINAL;	--we'll use the smallest	diskOut: tfsdskPtr _ NIL;		--export this to ColorPressDefsl2999e1k72(635)\b15B259i24I28i32I	filePtrOut: filePtr = @fp;	fp: FP;	magentaFirstScan: CARDINAL;	yellowFirstScan: CARDINAL;	cyanFirstScan: CARDINAL;	outPageGArray: POINTER TO ARRAY OF PageG;	firstScanLine: ARRAY [magenta..cyan] OF CARDINAL;	lastScanLine: ARRAY[magenta..cyan] OF CARDINAL;	firstScanWord: ARRAY[magenta..cyan] OF CARDINAL;	lastScanWord: ARRAY[magenta..cyan] OF CARDINAL;	bitPage: ARRAY[magenta..cyan] OF CARDINAL;	thisColorUsed: ARRAY[magenta..cyan] OF BOOLEAN;--may not be bits there for this color	diskIn, diskOut: PUBLIC tfsdskPtr;InitOutFile: PROC[]=	--do general initialization--this is called after we know there is an input file{	outPageGArray _ AllocateHeapNode[PageGLength*numPages];--now get the first trident buffer of image for each color, and init the output buffer	imageSegment[magenta] _ NewDataSegment[DefaultBase, 4];--get 1K	imageSegment[yellow] _ NewDataSegment[DefaultBase, 4];--get 1K	imageSegment[cyan] _ NewDataSegment[DefaultBase, 4];--get 1K	imageBuf[magenta] _ SegmentAddress[imageSegment[magenta]];	imageBuf[yellow] _ SegmentAddress[imageSegment[yellow]];	imageBuf[cyan] _ SegmentAddress[imageSegment[yellow]];};--InitOutFileInitPage: PROC[disk: tfsdskPtr, pageNum] RETURNS[totalScansOut, scanLenOut]={	pNum: CARDINAL _ pageNum - 1;	mag: CARDINAL _ pageNum*nPrinterColors;	yel: CARDINAL _ mag + 1;	cya: CARDINAL _ yel + 1;--in all of this it is important to remember that LastBand-FirstBand may be <0	firstBand _ MIN[pageGarray[mag].FirstBand, MIN[pageGarray[yel].FirstBand, pageGarray[cya].FirstBand]];	lastBand _ MAX[pageGarray[mag].LastBand, MAX[pageGarray[yel].LastBand, pageGarray[cya].LastBand]];	bitMargin _ MIN[pageGarray[mag].BitMargin, MIN[pageGarray[yel].BitMargin, pageGarray[cya].BitMargin]];--	bitMargin _ bitMargin/16;	----this was a bit count--calculate the intersection of the output scan with each of the colors	firstScanWord[magenta] _ (pageGarray[mag].BitMargin - bitMargin)/16;	firstScanWord[yellow] _ (pageGarray[yel].BitMargin - bitMargin)/16;	firstScanWord[cyan] _ (pageGarray[cya].BitMargin - bitMargin)/16;--at this point, bitMargin is the MIN of the three bitMargins	lastScanWord[magenta] _ firstScanWord[magenta] + pageGarray[mag].BitWc;	lastScanWord[yellow] _ firstScanWord[yellow] + pageGarray[yel].BitWc;	lastScanWord[cyan] _ firstScanWord[cyan] + pageGarray[cya].BitWc;	scanLenOut _ MAX[lastScanWord[magenta], MAX [lastScanWord[yellow], lastScanWord[cyan]]];	totalScansOut _ (lastBand - firstBand + 1) * bandWidth;l2999e1k72(0,3648)(1,4269)(2,4904)(3,9888)\36b2B81b2B41b2B292i37I36b14B8i27I1i53I60i87I57i9I55i9I53i9I177bi2B11bI9B195i78I340i23I1i72I206i63I211i2I145i--get the first load of each color	ReadPage[pageGArray[pNum*nPrinterColors].BitPage, imageBuf[magenta]];	ReadPage[pageGArray[pNum*nPrinterColors +1].BitPage, imageBuf[yellow]];	ReadPage[pageGArray[pNum*nPrinterColors + 2].BitPage, imageBuf[cyan]];};--Procedure InitPageGetNextWord: PUBLIC PROC[scanWordNo, scanLineNo: CARDINAL, color: ColorEnum] RETURNS [wrd: CARDINAL]={	IF ~(scanLineNo IN [firstScanLine[color]..lastScanLine[color]]) THEN RETURN [0];	IF ~(scanWordNo IN [firstScanWord[color]..lastScanWord[color]) THEN RETURN[0];};--GetNextWordCloseOutFile: PUBLIC PROC[]={	firstPageBuffer: POINTER;	firstPageSeg: DataSegmentHandle;	--write out the pageGArray, free its storage, then	firstPageSeg _ NewDataSegment[DefaultBase, 4];--get 1K	firstPageBuffer _ SegmentAddress[firstPageSeg];l2999e1k72(635)\i35I223i19bI12B258i13bI14B44b2B35i52I47i8I	firstPageBuffer[0] _ numPages;	firstPageBuffer[1] _ PageGLength; 	firstPageBuffer[2] _ printerMode; 	firstPageBuffer[3] _ PressPassword; 	COPY[outPageGArray, PageGLength*numPages, @firstPageBuffer[4]];	WritePage[1, firstPageBuffer];	--write to trident: ColorPress.bits	DeleteDataSegment[firstPageSeg];	[]_TfsCloseDisk[diskOut, TRUE];	--free ddMgr	FreeHeapNode[outPageGArray];};--CloseOutFileEND. -- ColorPressUtilsl2999e1k72\240i35I69i12I33i15I4i