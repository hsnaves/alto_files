/* File XCTables.h */char PreCyTable[]		/* Different syntax from EventTable: for PreCycle */{	AndBits,		/* Turn off print request at beginning of world */	PORT3A,	~(PRINT_REQ_OFF),	OrBits,	PORT3A,	PRINT_REQ_OFF,	OrBits,	PORT1B,	AC,	AndBits,	/* diverter up */	PORT3A,	~(DIVERTER),	OrBits,	PORT1A,	ERASE,	AndBits,	PORT1A,	~(DRUM_DRIVE | EL_STRIPS | C_B_MOTOR | C_R_MOTOR | C_B_BIAS | C_R_BIAS),	OrBits,	PORT1B,	VACUUM | FUSER_DRIVE | LASER | ROS | FUS_CLOCK | FUS_DIR,	AndBits,	PORT2B,	~(CHARGE | TRANSFER | PRE_CLEAN | DETACK),	OrBits,	PORT1A,	DRUM_DRIVE | EL_STRIPS | ERASE | C_B_MOTOR | C_R_MOTOR | C_B_BIAS | C_R_BIAS,	AndBits,	PORT1B,	~(FUS_CLOCK | FUS_DIR),	OrBits,	PORT2B,	CHARGE | TRANSFER | PRE_CLEAN | DETACK};/*==================================================================	 PreEventTable is used as a cold-start beginning to a print sequence================================================================== */	char PreEventTable[]{	/* Event T0 -- BE SURE PRINT REQUEST FLOP IS TURNED OFF BEFORE HERE*/	T0,	/* # of things to do in T0 */	2,	always,	AndBits,	PORT1A,	~(EL_STRIPS | PADDLE | C_B_MOTOR | C_R_MOTOR | C_B_BIAS | C_R_BIAS),	always,	OrBits,	PORT1A,	ERASE,	T1,	1,	always,	OrBits,	PORT1B,	VACUUM | BMI | FUS_CLOCK | FUS_DIR,	T2,	2,		always,	OrBits,	PORT2A,	/*All developer motors forward */	H1_CLEANER | H2_CLEANER | H3_CLEANER | H4_CLEANER,	always,	AndBits,	PORT2B,	~(CHARGE | TRANSFER | PRE_CLEAN | DETACK),	T3,	1,	always,	OrBits,	PORT3A,	DIVERTER	/* PUT DIVERTER DOWN */};/*==================================================================	 PreEventTable is used as a continuation of the print sequence.  It can    be looped in. See AnotherPage() for details================================================================== */	char PageEventTable[]{	T11,	2,	always,	AndBits,	PORT3A,	~(PAPER_FEED | GRIP_TRANS),	always,	OrBits,	PORT3A,	FUS_SPEED,	T16,	1,	always,	OrBits,	PORT3A,	GRIP_TRANS,	T24,	2,	always,	AndBits,	PORT2A,	~(H1_MOTOR),	always,	AndBits,	PORT2B,	~(BIAS1),	T28,	1,	always,	AndBits,	PORT2A,	~(PAGE_SYNC),	T50,	1,	always,	OrBits,	PORT3A,	GRIP_BAR,	T56,	1,	always,	AndBits,	PORT3A,	~(PAPER_FEED),	T60,	1,	always,	AndBits,	PORT3A,	~(GRIP_BAR),	T61,	1,	always,	AndBits,	PORT3A,	~(GRIP_TRANS),	T66,	3,	always,	OrBits,	PORT3A,	GRIP_TRANS,	always,	OrBits,	PORT2A,	H1_MOTOR,	always,	OrBits,	PORT2B,	BIAS1,	T68,	2,	always,	OrBits,	PORT3A,	PAGE_SYNC,	always,	AndBits,	PORT2A,	~(H1_CLEANER),	T70,	1,	always,	AndBits,	PORT2A,	~(H1_MOTOR),	T78,	1,	always,	AndBits,	PORT3A,	~(PAGE_SYNC),	T83,	3,	always,	OrBits,	PORT2A,	H1_MOTOR | H1_CLEANER,	always,	AndBits,	PORT2A,	~(H2_MOTOR),	always,	AndBits,	PORT2B,	~(BIAS2),	T93,	1,	always,	AndBits,	PORT3A,	~(DIVERTER),	T95,	1,	always,	Normalize,	T100,		T114,	1,	always,	OrBits,	PORT3A,	DIVERTER,	T119,	1,	always,	OrBits,	PORT3A,	PAGE_SYNC,	T128,	1,	always,	AndBits,	PORT3A,	~(PAGE_SYNC),	T132,	2,	always,	OrBits,	PORT2A,	H2_MOTOR,	always,	OrBits,	PORT2B,	BIAS2,	T134,	1,	always,	AndBits,	PORT2B,	~(H2_CLEANER),	T136,	1,	always,	AndBits,	PORT2B,	~(H2_MOTOR),	T143,	1,	always,	AndBits,	PORT3A,	~(DIVERTER),	T145,	1,	always,	OrBits,	PORT2A,	H2_MOTOR | H2_CLEANER,	T146,	2,	always,	AndBits,	PORT2A,	~(H3_MOTOR),	always,	AndBits,	PORT2B,	~(BIAS3),	T164,	1,	always,	OrBits,	PORT3A,	DIVERTER,	T168,	1,	always,	AndBits,	PORT3A,	~(PAGE_SYNC),	T178,	1,	always,	OrBits,	PORT3A,	PAGE_SYNC,	T193,	2,	always,	OrBits,	PORT2B,	BIAS3,	always,	OrBits,	PORT2A,	H3_MOTOR,	T194,	1,	always,	AndBits,	PORT3A,	~(DIVERTER),	T195,	1,	always,	AndBits,	PORT2A,	~(H3_CLEANER),	T197,	1,	always,	AndBits,	PORT2A,	~(H3_MOTOR),	T198,	1,	always,	Normalize,	T200,	T209,	1,	always,	OrBits,	PORT3A,	DIVERTER,	T210,	3,	always,	OrBits,	PORT2A,	H3_MOTOR | H3_CLEANER,	always,	AndBits,	PORT2A,	~(H4_MOTOR),	always,	AndBits,	PORT2B,	~(BIAS4),	T219,	1,	always,	AndBits,	PORT3A,	~(PAGE_SYNC),	T220,	1,	always,	OrBits,	PORT3A,	PAGE_SYNC,	T254,	3,	always,	OrBits,	PORT2A,	H4_MOTOR,	always,	OrBits,	PORT2B,	BIAS4,	always,	AndBits,	PORT2A,	~(H4_CLEANER),	T258,	3,	always,	AndBits,	PORT2A,	~(H4_MOTOR),	T262,	1,	always,	AndBits,	PORT3A,	~(GRIP_TRANS),	T267,	1,	always,	OrBits,	PORT3A,	GRIP_TRANS,	T271,	1,	always,	OrBits,	PORT2A,	H4_MOTOR | H4_CLEANER,	T292,	1,	always,	AndBits,	PORT3A,	~(DIVERTER),	T293,	1,	always,	Normalize,	T300,	T302,	2,	always,	OrBits,	PORT3A,	GRIP_BAR,	always,	AndBits,	PORT1B,	~(FUS_CLOCK),	T304,	2,	always,	AndBits,	PORT1B,	~(FUS_DIR),	always,	OrBits,	PORT1B,	FUS_CLOCK,	T305,	2,	always,	OrBits,	PORT1B,	FUS_DIR,	always,	AndBits,	PORT1B,	~(FUS_CLOCK),	T306,	1,	always,	OrBits,	PORT1B,	FUS_CLOCK,	T377,	1,	ifPageReq,	AnotherPage,	T380,	6,	always,	DriveOff,	always,	OrBits,	PORT1A,	(DRUM_DRIVE | EL_STRIPS | PADDLE | ERASE | C_B_MOTOR | C_R_MOTOR | C_B_BIAS | C_R_BIAS),	always,	AndBits,	PORT1B,	~(VACUUM | BMI),	always,	OrBits,	PORT2A,	(H1_CLEANER | H2_CLEANER | H3_CLEANER | H4_CLEANER),	always,	OrBits,	PORT2B,	(CHARGE | TRANSFER | PRE_CLEAN | DETACK),	always,	OrBits,	PORT3A,	DIVERTER,	allOnes};